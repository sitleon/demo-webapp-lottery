// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package repos

import (
	"context"
	"database/sql"
	"time"
)

const countTicket = `-- name: CountTicket :one
SELECT count(*) FROM "public"."ticket" WHERE draw_id = $1
`

func (q *Queries) CountTicket(ctx context.Context, drawID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTicket, drawID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createDraw = `-- name: CreateDraw :exec
INSERT INTO "public"."draw" ("draw_id", "drew_at") VALUES ($1, $2)
`

type CreateDrawParams struct {
	DrawID int64     `json:"drawId"`
	DrewAt time.Time `json:"drewAt"`
}

func (q *Queries) CreateDraw(ctx context.Context, arg CreateDrawParams) error {
	_, err := q.db.ExecContext(ctx, createDraw, arg.DrawID, arg.DrewAt)
	return err
}

const createTicket = `-- name: CreateTicket :exec
INSERT INTO "public"."ticket" ("ticket_id", "draw_id") VALUES ($1, $2)
`

type CreateTicketParams struct {
	TicketID string `json:"ticketId"`
	DrawID   int64  `json:"drawId"`
}

func (q *Queries) CreateTicket(ctx context.Context, arg CreateTicketParams) error {
	_, err := q.db.ExecContext(ctx, createTicket, arg.TicketID, arg.DrawID)
	return err
}

const getDraw = `-- name: GetDraw :one
SELECT "draw_id", "winner_ticket", "drew_at" FROM "public"."draw" WHERE "draw_id" = $1
`

type GetDrawRow struct {
	DrawID       int64          `json:"drawId"`
	WinnerTicket sql.NullString `json:"winnerTicket"`
	DrewAt       time.Time      `json:"drewAt"`
}

func (q *Queries) GetDraw(ctx context.Context, drawID int64) (GetDrawRow, error) {
	row := q.db.QueryRowContext(ctx, getDraw, drawID)
	var i GetDrawRow
	err := row.Scan(&i.DrawID, &i.WinnerTicket, &i.DrewAt)
	return i, err
}

const getTicket = `-- name: GetTicket :one
SELECT
    "ticket"."ticket_id" AS "ticket_id",
    "ticket"."draw_id" AS "draw_id",
    CAST("draw"."winner_ticket" IS NOT NULL AS BOOLEAN) AS "is_draw",
    CAST("draw"."winner_ticket" = "ticket"."ticket_id" AS BOOLEAN) AS "is_winner"
FROM "public"."ticket"
LEFT JOIN "public"."draw" ON "draw"."draw_id" = "ticket"."draw_id"
WHERE "ticket_id" = $1
`

type GetTicketRow struct {
	TicketID string `json:"ticketId"`
	DrawID   int64  `json:"drawId"`
	IsDraw   bool   `json:"isDraw"`
	IsWinner bool   `json:"isWinner"`
}

func (q *Queries) GetTicket(ctx context.Context, ticketID string) (GetTicketRow, error) {
	row := q.db.QueryRowContext(ctx, getTicket, ticketID)
	var i GetTicketRow
	err := row.Scan(
		&i.TicketID,
		&i.DrawID,
		&i.IsDraw,
		&i.IsWinner,
	)
	return i, err
}

const setDrawWinner = `-- name: SetDrawWinner :one
UPDATE "public"."draw"
	SET "winner_ticket" = "winner"."ticket_id",
		"update_at" = NOW()
	FROM (
        SELECT "ticket_id" FROM "public"."ticket"
        	WHERE "draw_id" = $1 OFFSET $2 LIMIT 1
    ) AS "winner"
WHERE "draw"."draw_id" = $1 AND "winner_ticket" IS NULL
RETURNING "winner_ticket"
`

type SetDrawWinnerParams struct {
	DrawID int64 `json:"drawId"`
	Offset int32 `json:"offset"`
}

func (q *Queries) SetDrawWinner(ctx context.Context, arg SetDrawWinnerParams) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, setDrawWinner, arg.DrawID, arg.Offset)
	var winner_ticket sql.NullString
	err := row.Scan(&winner_ticket)
	return winner_ticket, err
}
